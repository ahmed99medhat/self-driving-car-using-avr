
self driving car.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000007d8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000018  00800060  000007d8  0000086c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800078  00800078  00000884  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000884  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000008b4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000108  00000000  00000000  000008f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000195a  00000000  00000000  000009f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a70  00000000  00000000  00002352  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b47  00000000  00000000  00002dc2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001a0  00000000  00000000  0000390c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000069a  00000000  00000000  00003aac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000793  00000000  00000000  00004146  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  000048d9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 c8 02 	jmp	0x590	; 0x590 <__vector_1>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 ed       	ldi	r30, 0xD8	; 216
  68:	f7 e0       	ldi	r31, 0x07	; 7
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 37       	cpi	r26, 0x78	; 120
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a8 e7       	ldi	r26, 0x78	; 120
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ae 37       	cpi	r26, 0x7E	; 126
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 ea 03 	jmp	0x7d4	; 0x7d4 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
	volatile uint16_t distance_front_the_ultra=0;//variable to get the distance of object front the ultrasonic
	

int main(void)
{
	LCD_Initialization();
  92:	0e 94 cc 01 	call	0x398	; 0x398 <LCD_Initialization>
	ServoMotor_Initialization();
  96:	0e 94 66 02 	call	0x4cc	; 0x4cc <ServoMotor_Initialization>
	Motor_Initialization();
  9a:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <Motor_Initialization>
	while (1)
	{
		distance_front_the_ultra=Ultrasonic();//to get the distance of object front the ultrasonic
  9e:	0e 94 a0 02 	call	0x540	; 0x540 <Ultrasonic>
  a2:	90 93 79 00 	sts	0x0079, r25	; 0x800079 <__data_end+0x1>
  a6:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <__data_end>
		if(distance_front_the_ultra>=35)
  aa:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__data_end>
  ae:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__data_end+0x1>
  b2:	83 97       	sbiw	r24, 0x23	; 35
  b4:	f8 f0       	brcs	.+62     	; 0xf4 <main+0x62>
		{
			Motor_Start(Motor1, Motor_CW);
  b6:	60 e0       	ldi	r22, 0x00	; 0
  b8:	80 e0       	ldi	r24, 0x00	; 0
  ba:	0e 94 17 01 	call	0x22e	; 0x22e <Motor_Start>
			Motor_Start(Motor2, Motor_CW);//move forward
  be:	60 e0       	ldi	r22, 0x00	; 0
  c0:	81 e0       	ldi	r24, 0x01	; 1
  c2:	0e 94 17 01 	call	0x22e	; 0x22e <Motor_Start>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c6:	8f e5       	ldi	r24, 0x5F	; 95
  c8:	9a ee       	ldi	r25, 0xEA	; 234
  ca:	01 97       	sbiw	r24, 0x01	; 1
  cc:	f1 f7       	brne	.-4      	; 0xca <main+0x38>
  ce:	00 c0       	rjmp	.+0      	; 0xd0 <main+0x3e>
  d0:	00 00       	nop
			_delay_ms(15);
			Motor_Stop(Motor1);
  d2:	80 e0       	ldi	r24, 0x00	; 0
  d4:	0e 94 5f 01 	call	0x2be	; 0x2be <Motor_Stop>
			Motor_Stop(Motor2);
  d8:	81 e0       	ldi	r24, 0x01	; 1
  da:	0e 94 5f 01 	call	0x2be	; 0x2be <Motor_Stop>
			LCD_Write_String("forward");
  de:	80 e6       	ldi	r24, 0x60	; 96
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	0e 94 51 02 	call	0x4a2	; 0x4a2 <LCD_Write_String>
  e6:	8f e5       	ldi	r24, 0x5F	; 95
  e8:	9a ee       	ldi	r25, 0xEA	; 234
  ea:	01 97       	sbiw	r24, 0x01	; 1
  ec:	f1 f7       	brne	.-4      	; 0xea <main+0x58>
  ee:	00 c0       	rjmp	.+0      	; 0xf0 <main+0x5e>
  f0:	00 00       	nop
  f2:	d5 cf       	rjmp	.-86     	; 0x9e <main+0xc>
			_delay_ms(15);
		}
		else if (distance_front_the_ultra<35)
  f4:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__data_end>
  f8:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__data_end+0x1>
  fc:	83 97       	sbiw	r24, 0x23	; 35
  fe:	78 f6       	brcc	.-98     	; 0x9e <main+0xc>
		{
			ServoMotor_Rotate(90);//rotate the servo 90 degree to the right
 100:	8a e5       	ldi	r24, 0x5A	; 90
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	0e 94 87 02 	call	0x50e	; 0x50e <ServoMotor_Rotate>
			distance_front_the_ultra=Ultrasonic();//to get new value after rotation
 108:	0e 94 a0 02 	call	0x540	; 0x540 <Ultrasonic>
 10c:	90 93 79 00 	sts	0x0079, r25	; 0x800079 <__data_end+0x1>
 110:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <__data_end>
			                    if(distance_front_the_ultra>=35)
 114:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__data_end>
 118:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__data_end+0x1>
 11c:	83 97       	sbiw	r24, 0x23	; 35
 11e:	d8 f0       	brcs	.+54     	; 0x156 <main+0xc4>
			                    {
									 LCD_Clear();
 120:	0e 94 05 02 	call	0x40a	; 0x40a <LCD_Clear>
									 LCD_Write_String("right");
 124:	88 e6       	ldi	r24, 0x68	; 104
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	0e 94 51 02 	call	0x4a2	; 0x4a2 <LCD_Write_String>
				                       Motor_Start(Motor1,Motor_CW);//move right
 12c:	60 e0       	ldi	r22, 0x00	; 0
 12e:	80 e0       	ldi	r24, 0x00	; 0
 130:	0e 94 17 01 	call	0x22e	; 0x22e <Motor_Start>
			                           Motor_Stop(Motor1);
 134:	80 e0       	ldi	r24, 0x00	; 0
 136:	0e 94 5f 01 	call	0x2be	; 0x2be <Motor_Stop>
 13a:	9f ef       	ldi	r25, 0xFF	; 255
 13c:	23 ed       	ldi	r18, 0xD3	; 211
 13e:	80 e3       	ldi	r24, 0x30	; 48
 140:	91 50       	subi	r25, 0x01	; 1
 142:	20 40       	sbci	r18, 0x00	; 0
 144:	80 40       	sbci	r24, 0x00	; 0
 146:	e1 f7       	brne	.-8      	; 0x140 <main+0xae>
 148:	00 c0       	rjmp	.+0      	; 0x14a <main+0xb8>
 14a:	00 00       	nop
									    _delay_ms(1000);//////////////////////////////////////////////////////////////
				                       ServoMotor_Rotate(-90);//to return to the initial position 
 14c:	86 ea       	ldi	r24, 0xA6	; 166
 14e:	9f ef       	ldi	r25, 0xFF	; 255
 150:	0e 94 87 02 	call	0x50e	; 0x50e <ServoMotor_Rotate>
 154:	48 c0       	rjmp	.+144    	; 0x1e6 <main+0x154>
									   
									  
			                    }
			                    else if (distance_front_the_ultra<35)
 156:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__data_end>
 15a:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__data_end+0x1>
 15e:	83 97       	sbiw	r24, 0x23	; 35
 160:	08 f0       	brcs	.+2      	; 0x164 <main+0xd2>
 162:	41 c0       	rjmp	.+130    	; 0x1e6 <main+0x154>
			                    {
			                   	       ServoMotor_Rotate(-180);//to rotate servo 90 degree to the left
 164:	8c e4       	ldi	r24, 0x4C	; 76
 166:	9f ef       	ldi	r25, 0xFF	; 255
 168:	0e 94 87 02 	call	0x50e	; 0x50e <ServoMotor_Rotate>
									   distance_front_the_ultra=Ultrasonic();//to get new value after rotation  
 16c:	0e 94 a0 02 	call	0x540	; 0x540 <Ultrasonic>
 170:	90 93 79 00 	sts	0x0079, r25	; 0x800079 <__data_end+0x1>
 174:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <__data_end>
										  if (distance_front_the_ultra>=35)
 178:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__data_end>
 17c:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__data_end+0x1>
 180:	83 97       	sbiw	r24, 0x23	; 35
 182:	d8 f0       	brcs	.+54     	; 0x1ba <main+0x128>
										  {
											   LCD_Clear();
 184:	0e 94 05 02 	call	0x40a	; 0x40a <LCD_Clear>
											   LCD_Write_String("left");
 188:	8e e6       	ldi	r24, 0x6E	; 110
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	0e 94 51 02 	call	0x4a2	; 0x4a2 <LCD_Write_String>
											  Motor_Start(Motor1,Motor_CW);
 190:	60 e0       	ldi	r22, 0x00	; 0
 192:	80 e0       	ldi	r24, 0x00	; 0
 194:	0e 94 17 01 	call	0x22e	; 0x22e <Motor_Start>
											  Motor_Stop(Motor1);//move left
 198:	80 e0       	ldi	r24, 0x00	; 0
 19a:	0e 94 5f 01 	call	0x2be	; 0x2be <Motor_Stop>
 19e:	9f ef       	ldi	r25, 0xFF	; 255
 1a0:	23 ed       	ldi	r18, 0xD3	; 211
 1a2:	80 e3       	ldi	r24, 0x30	; 48
 1a4:	91 50       	subi	r25, 0x01	; 1
 1a6:	20 40       	sbci	r18, 0x00	; 0
 1a8:	80 40       	sbci	r24, 0x00	; 0
 1aa:	e1 f7       	brne	.-8      	; 0x1a4 <main+0x112>
 1ac:	00 c0       	rjmp	.+0      	; 0x1ae <main+0x11c>
 1ae:	00 00       	nop
											    _delay_ms(1000);//////////////////////////////////////////////////////////////
											  ServoMotor_Rotate(90);//to return to the initial position
 1b0:	8a e5       	ldi	r24, 0x5A	; 90
 1b2:	90 e0       	ldi	r25, 0x00	; 0
 1b4:	0e 94 87 02 	call	0x50e	; 0x50e <ServoMotor_Rotate>
 1b8:	16 c0       	rjmp	.+44     	; 0x1e6 <main+0x154>
											  
										  }
										  else if (distance_front_the_ultra<35)
 1ba:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__data_end>
 1be:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__data_end+0x1>
 1c2:	83 97       	sbiw	r24, 0x23	; 35
 1c4:	80 f4       	brcc	.+32     	; 0x1e6 <main+0x154>
										 {
											  LCD_Clear();
 1c6:	0e 94 05 02 	call	0x40a	; 0x40a <LCD_Clear>
											  LCD_Write_String("Stop");
 1ca:	83 e7       	ldi	r24, 0x73	; 115
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	0e 94 51 02 	call	0x4a2	; 0x4a2 <LCD_Write_String>
											 Motor_Stop(Motor1);
 1d2:	80 e0       	ldi	r24, 0x00	; 0
 1d4:	0e 94 5f 01 	call	0x2be	; 0x2be <Motor_Stop>
											 Motor_Stop(Motor2);//stop
 1d8:	81 e0       	ldi	r24, 0x01	; 1
 1da:	0e 94 5f 01 	call	0x2be	; 0x2be <Motor_Stop>
											 ServoMotor_Rotate(90);//to return to the initial position
 1de:	8a e5       	ldi	r24, 0x5A	; 90
 1e0:	90 e0       	ldi	r25, 0x00	; 0
 1e2:	0e 94 87 02 	call	0x50e	; 0x50e <ServoMotor_Rotate>
											
										 }
			                    } 
			
		   distance_front_the_ultra=0;
 1e6:	10 92 79 00 	sts	0x0079, r1	; 0x800079 <__data_end+0x1>
 1ea:	10 92 78 00 	sts	0x0078, r1	; 0x800078 <__data_end>
 1ee:	57 cf       	rjmp	.-338    	; 0x9e <main+0xc>

000001f0 <Motor_Initialization>:
 1f0:	41 e0       	ldi	r20, 0x01	; 1
 1f2:	64 e0       	ldi	r22, 0x04	; 4
 1f4:	83 e0       	ldi	r24, 0x03	; 3
 1f6:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <DIO_SetPinDirection>
 1fa:	41 e0       	ldi	r20, 0x01	; 1
 1fc:	65 e0       	ldi	r22, 0x05	; 5
 1fe:	83 e0       	ldi	r24, 0x03	; 3
 200:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <DIO_SetPinDirection>
 204:	41 e0       	ldi	r20, 0x01	; 1
 206:	63 e0       	ldi	r22, 0x03	; 3
 208:	82 e0       	ldi	r24, 0x02	; 2
 20a:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <DIO_SetPinDirection>
 20e:	41 e0       	ldi	r20, 0x01	; 1
 210:	64 e0       	ldi	r22, 0x04	; 4
 212:	82 e0       	ldi	r24, 0x02	; 2
 214:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <DIO_SetPinDirection>
 218:	41 e0       	ldi	r20, 0x01	; 1
 21a:	65 e0       	ldi	r22, 0x05	; 5
 21c:	82 e0       	ldi	r24, 0x02	; 2
 21e:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <DIO_SetPinDirection>
 222:	41 e0       	ldi	r20, 0x01	; 1
 224:	66 e0       	ldi	r22, 0x06	; 6
 226:	82 e0       	ldi	r24, 0x02	; 2
 228:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <DIO_SetPinDirection>
 22c:	08 95       	ret

0000022e <Motor_Start>:
 22e:	cf 93       	push	r28
 230:	c6 2f       	mov	r28, r22
 232:	88 23       	and	r24, r24
 234:	19 f0       	breq	.+6      	; 0x23c <Motor_Start+0xe>
 236:	81 30       	cpi	r24, 0x01	; 1
 238:	09 f1       	breq	.+66     	; 0x27c <Motor_Start+0x4e>
 23a:	3f c0       	rjmp	.+126    	; 0x2ba <Motor_Start+0x8c>
 23c:	41 e0       	ldi	r20, 0x01	; 1
 23e:	64 e0       	ldi	r22, 0x04	; 4
 240:	83 e0       	ldi	r24, 0x03	; 3
 242:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <DIO_SetPinValue>
 246:	cc 23       	and	r28, r28
 248:	19 f0       	breq	.+6      	; 0x250 <Motor_Start+0x22>
 24a:	c1 30       	cpi	r28, 0x01	; 1
 24c:	61 f0       	breq	.+24     	; 0x266 <Motor_Start+0x38>
 24e:	35 c0       	rjmp	.+106    	; 0x2ba <Motor_Start+0x8c>
 250:	41 e0       	ldi	r20, 0x01	; 1
 252:	63 e0       	ldi	r22, 0x03	; 3
 254:	82 e0       	ldi	r24, 0x02	; 2
 256:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <DIO_SetPinValue>
 25a:	40 e0       	ldi	r20, 0x00	; 0
 25c:	64 e0       	ldi	r22, 0x04	; 4
 25e:	82 e0       	ldi	r24, 0x02	; 2
 260:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <DIO_SetPinValue>
 264:	2a c0       	rjmp	.+84     	; 0x2ba <Motor_Start+0x8c>
 266:	40 e0       	ldi	r20, 0x00	; 0
 268:	63 e0       	ldi	r22, 0x03	; 3
 26a:	82 e0       	ldi	r24, 0x02	; 2
 26c:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <DIO_SetPinValue>
 270:	41 e0       	ldi	r20, 0x01	; 1
 272:	64 e0       	ldi	r22, 0x04	; 4
 274:	82 e0       	ldi	r24, 0x02	; 2
 276:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <DIO_SetPinValue>
 27a:	1f c0       	rjmp	.+62     	; 0x2ba <Motor_Start+0x8c>
 27c:	41 e0       	ldi	r20, 0x01	; 1
 27e:	65 e0       	ldi	r22, 0x05	; 5
 280:	83 e0       	ldi	r24, 0x03	; 3
 282:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <DIO_SetPinValue>
 286:	cc 23       	and	r28, r28
 288:	19 f0       	breq	.+6      	; 0x290 <Motor_Start+0x62>
 28a:	c1 30       	cpi	r28, 0x01	; 1
 28c:	61 f0       	breq	.+24     	; 0x2a6 <Motor_Start+0x78>
 28e:	15 c0       	rjmp	.+42     	; 0x2ba <Motor_Start+0x8c>
 290:	41 e0       	ldi	r20, 0x01	; 1
 292:	65 e0       	ldi	r22, 0x05	; 5
 294:	82 e0       	ldi	r24, 0x02	; 2
 296:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <DIO_SetPinValue>
 29a:	40 e0       	ldi	r20, 0x00	; 0
 29c:	66 e0       	ldi	r22, 0x06	; 6
 29e:	82 e0       	ldi	r24, 0x02	; 2
 2a0:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <DIO_SetPinValue>
 2a4:	0a c0       	rjmp	.+20     	; 0x2ba <Motor_Start+0x8c>
 2a6:	40 e0       	ldi	r20, 0x00	; 0
 2a8:	65 e0       	ldi	r22, 0x05	; 5
 2aa:	82 e0       	ldi	r24, 0x02	; 2
 2ac:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <DIO_SetPinValue>
 2b0:	41 e0       	ldi	r20, 0x01	; 1
 2b2:	66 e0       	ldi	r22, 0x06	; 6
 2b4:	82 e0       	ldi	r24, 0x02	; 2
 2b6:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <DIO_SetPinValue>
 2ba:	cf 91       	pop	r28
 2bc:	08 95       	ret

000002be <Motor_Stop>:
 2be:	88 23       	and	r24, r24
 2c0:	19 f0       	breq	.+6      	; 0x2c8 <Motor_Stop+0xa>
 2c2:	81 30       	cpi	r24, 0x01	; 1
 2c4:	89 f0       	breq	.+34     	; 0x2e8 <Motor_Stop+0x2a>
 2c6:	08 95       	ret
 2c8:	40 e0       	ldi	r20, 0x00	; 0
 2ca:	64 e0       	ldi	r22, 0x04	; 4
 2cc:	83 e0       	ldi	r24, 0x03	; 3
 2ce:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <DIO_SetPinValue>
 2d2:	40 e0       	ldi	r20, 0x00	; 0
 2d4:	63 e0       	ldi	r22, 0x03	; 3
 2d6:	82 e0       	ldi	r24, 0x02	; 2
 2d8:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <DIO_SetPinValue>
 2dc:	40 e0       	ldi	r20, 0x00	; 0
 2de:	64 e0       	ldi	r22, 0x04	; 4
 2e0:	82 e0       	ldi	r24, 0x02	; 2
 2e2:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <DIO_SetPinValue>
 2e6:	08 95       	ret
 2e8:	40 e0       	ldi	r20, 0x00	; 0
 2ea:	65 e0       	ldi	r22, 0x05	; 5
 2ec:	83 e0       	ldi	r24, 0x03	; 3
 2ee:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <DIO_SetPinValue>
 2f2:	40 e0       	ldi	r20, 0x00	; 0
 2f4:	65 e0       	ldi	r22, 0x05	; 5
 2f6:	82 e0       	ldi	r24, 0x02	; 2
 2f8:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <DIO_SetPinValue>
 2fc:	40 e0       	ldi	r20, 0x00	; 0
 2fe:	66 e0       	ldi	r22, 0x06	; 6
 300:	82 e0       	ldi	r24, 0x02	; 2
 302:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <DIO_SetPinValue>
 306:	08 95       	ret

00000308 <LCD_Write_Command>:
{
	LCD_Write_Command(ClearScreen);
}

void LCD_Write_Command(uint8_t command)
{
 308:	cf 93       	push	r28
 30a:	c8 2f       	mov	r28, r24
	/*Register Select pin will select control register*/
	DIO_SetPinValue(LCD_CTRL_PORT, LCD_RS, LCD_LOW);
 30c:	40 e0       	ldi	r20, 0x00	; 0
 30e:	61 e0       	ldi	r22, 0x01	; 1
 310:	81 e0       	ldi	r24, 0x01	; 1
 312:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <DIO_SetPinValue>
	/*Read/Write pin will be write on LCD*/
	DIO_SetPinValue(LCD_CTRL_PORT, LCD_RW, LCD_LOW);
 316:	40 e0       	ldi	r20, 0x00	; 0
 318:	62 e0       	ldi	r22, 0x02	; 2
 31a:	81 e0       	ldi	r24, 0x01	; 1
 31c:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <DIO_SetPinValue>
	/*Be sure that enable is disabled*/
	DIO_SetPinValue(LCD_CTRL_PORT, LCD_EN, LCD_LOW);
 320:	40 e0       	ldi	r20, 0x00	; 0
 322:	63 e0       	ldi	r22, 0x03	; 3
 324:	81 e0       	ldi	r24, 0x01	; 1
 326:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <DIO_SetPinValue>
	/*Send high nipple of the command, without changing old PORTA pins(0-3)*/
	PORTA = (command & 0xF0) | (PORTA & 0x0F);
 32a:	8b b3       	in	r24, 0x1b	; 27
 32c:	9c 2f       	mov	r25, r28
 32e:	90 7f       	andi	r25, 0xF0	; 240
 330:	8f 70       	andi	r24, 0x0F	; 15
 332:	89 2b       	or	r24, r25
 334:	8b bb       	out	0x1b, r24	; 27
	/*Send High pulse for 1 millisecond*/
	DIO_SetPinValue(LCD_CTRL_PORT, LCD_EN, LCD_HIGH);
 336:	41 e0       	ldi	r20, 0x01	; 1
 338:	63 e0       	ldi	r22, 0x03	; 3
 33a:	81 e0       	ldi	r24, 0x01	; 1
 33c:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <DIO_SetPinValue>
 340:	8f e9       	ldi	r24, 0x9F	; 159
 342:	9f e0       	ldi	r25, 0x0F	; 15
 344:	01 97       	sbiw	r24, 0x01	; 1
 346:	f1 f7       	brne	.-4      	; 0x344 <LCD_Write_Command+0x3c>
 348:	00 c0       	rjmp	.+0      	; 0x34a <LCD_Write_Command+0x42>
 34a:	00 00       	nop
	_delay_ms(1);
	DIO_SetPinValue(LCD_CTRL_PORT, LCD_EN, LCD_LOW);
 34c:	40 e0       	ldi	r20, 0x00	; 0
 34e:	63 e0       	ldi	r22, 0x03	; 3
 350:	81 e0       	ldi	r24, 0x01	; 1
 352:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <DIO_SetPinValue>
	/*Send low nipple of the command, without changing old PORTA pins(0-3)*/
	PORTA = (command << 4) | (PORTA & 0x0F);
 356:	2b b3       	in	r18, 0x1b	; 27
 358:	30 e1       	ldi	r19, 0x10	; 16
 35a:	c3 9f       	mul	r28, r19
 35c:	c0 01       	movw	r24, r0
 35e:	11 24       	eor	r1, r1
 360:	92 2f       	mov	r25, r18
 362:	9f 70       	andi	r25, 0x0F	; 15
 364:	89 2b       	or	r24, r25
 366:	8b bb       	out	0x1b, r24	; 27
	/*Send High pulse for 1 millisecond*/
	DIO_SetPinValue(LCD_CTRL_PORT, LCD_EN, LCD_HIGH);
 368:	41 e0       	ldi	r20, 0x01	; 1
 36a:	63 e0       	ldi	r22, 0x03	; 3
 36c:	81 e0       	ldi	r24, 0x01	; 1
 36e:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <DIO_SetPinValue>
 372:	8f e9       	ldi	r24, 0x9F	; 159
 374:	9f e0       	ldi	r25, 0x0F	; 15
 376:	01 97       	sbiw	r24, 0x01	; 1
 378:	f1 f7       	brne	.-4      	; 0x376 <LCD_Write_Command+0x6e>
 37a:	00 c0       	rjmp	.+0      	; 0x37c <LCD_Write_Command+0x74>
 37c:	00 00       	nop
	_delay_ms(1);
	DIO_SetPinValue(LCD_CTRL_PORT, LCD_EN, LCD_LOW);
 37e:	40 e0       	ldi	r20, 0x00	; 0
 380:	63 e0       	ldi	r22, 0x03	; 3
 382:	81 e0       	ldi	r24, 0x01	; 1
 384:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <DIO_SetPinValue>
 388:	8f e1       	ldi	r24, 0x1F	; 31
 38a:	9e e4       	ldi	r25, 0x4E	; 78
 38c:	01 97       	sbiw	r24, 0x01	; 1
 38e:	f1 f7       	brne	.-4      	; 0x38c <LCD_Write_Command+0x84>
 390:	00 c0       	rjmp	.+0      	; 0x392 <LCD_Write_Command+0x8a>
 392:	00 00       	nop
	/*Wait controller to finish command*/
	_delay_ms(5);
}
 394:	cf 91       	pop	r28
 396:	08 95       	ret

00000398 <LCD_Initialization>:


void LCD_Initialization(void)
{
	/*Define direction for control pins*/
	DIO_SetPinDirection(LCD_CTRL_PORT, LCD_RS, LCD_OUT);
 398:	41 e0       	ldi	r20, 0x01	; 1
 39a:	61 e0       	ldi	r22, 0x01	; 1
 39c:	81 e0       	ldi	r24, 0x01	; 1
 39e:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <DIO_SetPinDirection>
	DIO_SetPinDirection(LCD_CTRL_PORT, LCD_RW, LCD_OUT);
 3a2:	41 e0       	ldi	r20, 0x01	; 1
 3a4:	62 e0       	ldi	r22, 0x02	; 2
 3a6:	81 e0       	ldi	r24, 0x01	; 1
 3a8:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <DIO_SetPinDirection>
	DIO_SetPinDirection(LCD_CTRL_PORT, LCD_EN, LCD_OUT);
 3ac:	41 e0       	ldi	r20, 0x01	; 1
 3ae:	63 e0       	ldi	r22, 0x03	; 3
 3b0:	81 e0       	ldi	r24, 0x01	; 1
 3b2:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <DIO_SetPinDirection>
	/*Define direction for data pins*/
	DIO_SetPinDirection(LCD_DATA_PORT, LCD_D4, LCD_OUT);
 3b6:	41 e0       	ldi	r20, 0x01	; 1
 3b8:	64 e0       	ldi	r22, 0x04	; 4
 3ba:	80 e0       	ldi	r24, 0x00	; 0
 3bc:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <DIO_SetPinDirection>
	DIO_SetPinDirection(LCD_DATA_PORT, LCD_D5, LCD_OUT);
 3c0:	41 e0       	ldi	r20, 0x01	; 1
 3c2:	65 e0       	ldi	r22, 0x05	; 5
 3c4:	80 e0       	ldi	r24, 0x00	; 0
 3c6:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <DIO_SetPinDirection>
	DIO_SetPinDirection(LCD_DATA_PORT, LCD_D6, LCD_OUT);
 3ca:	41 e0       	ldi	r20, 0x01	; 1
 3cc:	66 e0       	ldi	r22, 0x06	; 6
 3ce:	80 e0       	ldi	r24, 0x00	; 0
 3d0:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <DIO_SetPinDirection>
	DIO_SetPinDirection(LCD_DATA_PORT, LCD_D7, LCD_OUT);
 3d4:	41 e0       	ldi	r20, 0x01	; 1
 3d6:	67 e0       	ldi	r22, 0x07	; 7
 3d8:	80 e0       	ldi	r24, 0x00	; 0
 3da:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <DIO_SetPinDirection>
	/*Define commands needed to choose 4Bit mode*/
	LCD_Write_Command(BITSequence1);/*Define working in 4BIT mode*/
 3de:	83 e3       	ldi	r24, 0x33	; 51
 3e0:	0e 94 84 01 	call	0x308	; 0x308 <LCD_Write_Command>
	LCD_Write_Command(BITSequence2);/*Define working in 4BIT mode*/
 3e4:	82 e3       	ldi	r24, 0x32	; 50
 3e6:	0e 94 84 01 	call	0x308	; 0x308 <LCD_Write_Command>
	LCD_Write_Command(BITSequence3);/*Use 4BIT mode*/
 3ea:	88 e2       	ldi	r24, 0x28	; 40
 3ec:	0e 94 84 01 	call	0x308	; 0x308 <LCD_Write_Command>
	LCD_Write_Command(ReturnHome);/*Return home*/
 3f0:	82 e0       	ldi	r24, 0x02	; 2
 3f2:	0e 94 84 01 	call	0x308	; 0x308 <LCD_Write_Command>
	LCD_Write_Command(DisplayON);/*Display ON, Cursor OFF*/
 3f6:	8c e0       	ldi	r24, 0x0C	; 12
 3f8:	0e 94 84 01 	call	0x308	; 0x308 <LCD_Write_Command>
	LCD_Write_Command(ClearScreen);/*Clear screen*/
 3fc:	81 e0       	ldi	r24, 0x01	; 1
 3fe:	0e 94 84 01 	call	0x308	; 0x308 <LCD_Write_Command>
	LCD_Write_Command(IncrementRight);/*Increment cursor right*/
 402:	86 e0       	ldi	r24, 0x06	; 6
 404:	0e 94 84 01 	call	0x308	; 0x308 <LCD_Write_Command>
 408:	08 95       	ret

0000040a <LCD_Clear>:

}

void LCD_Clear(void)
{
	LCD_Write_Command(ClearScreen);
 40a:	81 e0       	ldi	r24, 0x01	; 1
 40c:	0e 94 84 01 	call	0x308	; 0x308 <LCD_Write_Command>
 410:	08 95       	ret

00000412 <LCD_Write_Character>:
	/*Wait controller to finish command*/
	_delay_ms(5);
}

void LCD_Write_Character(uint8_t character)
{
 412:	cf 93       	push	r28
 414:	c8 2f       	mov	r28, r24
	/*Register Select pin will select data register*/
	DIO_SetPinValue(LCD_CTRL_PORT, LCD_RS, LCD_HIGH);
 416:	41 e0       	ldi	r20, 0x01	; 1
 418:	61 e0       	ldi	r22, 0x01	; 1
 41a:	81 e0       	ldi	r24, 0x01	; 1
 41c:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <DIO_SetPinValue>
	/*Read/Write pin will be write on LCD*/
	DIO_SetPinValue(LCD_CTRL_PORT, LCD_RW, LCD_LOW);
 420:	40 e0       	ldi	r20, 0x00	; 0
 422:	62 e0       	ldi	r22, 0x02	; 2
 424:	81 e0       	ldi	r24, 0x01	; 1
 426:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <DIO_SetPinValue>
	/*Be sure that enable is disabled*/
	DIO_SetPinValue(LCD_CTRL_PORT, LCD_EN, LCD_LOW);
 42a:	40 e0       	ldi	r20, 0x00	; 0
 42c:	63 e0       	ldi	r22, 0x03	; 3
 42e:	81 e0       	ldi	r24, 0x01	; 1
 430:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <DIO_SetPinValue>
	/*Send high nipple of the command, without changing old PORTA pins(0-3)*/
	PORTA = (character & 0xF0) | (PORTA & 0x0F);
 434:	8b b3       	in	r24, 0x1b	; 27
 436:	9c 2f       	mov	r25, r28
 438:	90 7f       	andi	r25, 0xF0	; 240
 43a:	8f 70       	andi	r24, 0x0F	; 15
 43c:	89 2b       	or	r24, r25
 43e:	8b bb       	out	0x1b, r24	; 27
	/*Send High pulse for 1 millisecond*/
	DIO_SetPinValue(LCD_CTRL_PORT, LCD_EN, LCD_HIGH);
 440:	41 e0       	ldi	r20, 0x01	; 1
 442:	63 e0       	ldi	r22, 0x03	; 3
 444:	81 e0       	ldi	r24, 0x01	; 1
 446:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <DIO_SetPinValue>
 44a:	8f e9       	ldi	r24, 0x9F	; 159
 44c:	9f e0       	ldi	r25, 0x0F	; 15
 44e:	01 97       	sbiw	r24, 0x01	; 1
 450:	f1 f7       	brne	.-4      	; 0x44e <LCD_Write_Character+0x3c>
 452:	00 c0       	rjmp	.+0      	; 0x454 <LCD_Write_Character+0x42>
 454:	00 00       	nop
	_delay_ms(1);
	DIO_SetPinValue(LCD_CTRL_PORT, LCD_EN, LCD_LOW);
 456:	40 e0       	ldi	r20, 0x00	; 0
 458:	63 e0       	ldi	r22, 0x03	; 3
 45a:	81 e0       	ldi	r24, 0x01	; 1
 45c:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <DIO_SetPinValue>
	/*Send low nipple of the command, without changing old PORTA pins(0-3)*/
	PORTA = (character << 4) | (PORTA & 0x0F);
 460:	2b b3       	in	r18, 0x1b	; 27
 462:	30 e1       	ldi	r19, 0x10	; 16
 464:	c3 9f       	mul	r28, r19
 466:	c0 01       	movw	r24, r0
 468:	11 24       	eor	r1, r1
 46a:	92 2f       	mov	r25, r18
 46c:	9f 70       	andi	r25, 0x0F	; 15
 46e:	89 2b       	or	r24, r25
 470:	8b bb       	out	0x1b, r24	; 27
	/*Send High pulse for 1 millisecond*/
	DIO_SetPinValue(LCD_CTRL_PORT, LCD_EN, LCD_HIGH);
 472:	41 e0       	ldi	r20, 0x01	; 1
 474:	63 e0       	ldi	r22, 0x03	; 3
 476:	81 e0       	ldi	r24, 0x01	; 1
 478:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <DIO_SetPinValue>
 47c:	8f e9       	ldi	r24, 0x9F	; 159
 47e:	9f e0       	ldi	r25, 0x0F	; 15
 480:	01 97       	sbiw	r24, 0x01	; 1
 482:	f1 f7       	brne	.-4      	; 0x480 <LCD_Write_Character+0x6e>
 484:	00 c0       	rjmp	.+0      	; 0x486 <LCD_Write_Character+0x74>
 486:	00 00       	nop
	_delay_ms(1);
	DIO_SetPinValue(LCD_CTRL_PORT, LCD_EN, LCD_LOW);
 488:	40 e0       	ldi	r20, 0x00	; 0
 48a:	63 e0       	ldi	r22, 0x03	; 3
 48c:	81 e0       	ldi	r24, 0x01	; 1
 48e:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <DIO_SetPinValue>
 492:	8f e1       	ldi	r24, 0x1F	; 31
 494:	9e e4       	ldi	r25, 0x4E	; 78
 496:	01 97       	sbiw	r24, 0x01	; 1
 498:	f1 f7       	brne	.-4      	; 0x496 <LCD_Write_Character+0x84>
 49a:	00 c0       	rjmp	.+0      	; 0x49c <LCD_Write_Character+0x8a>
 49c:	00 00       	nop
	/*Wait controller to finish command*/
	_delay_ms(5);
}
 49e:	cf 91       	pop	r28
 4a0:	08 95       	ret

000004a2 <LCD_Write_String>:
void LCD_Write_String(uint8_t* str)
{
 4a2:	cf 93       	push	r28
 4a4:	df 93       	push	r29
 4a6:	ec 01       	movw	r28, r24
	while(*str != '\0')
 4a8:	88 81       	ld	r24, Y
 4aa:	88 23       	and	r24, r24
 4ac:	61 f0       	breq	.+24     	; 0x4c6 <LCD_Write_String+0x24>
 4ae:	21 96       	adiw	r28, 0x01	; 1
	{
		LCD_Write_Character(*str);
 4b0:	0e 94 09 02 	call	0x412	; 0x412 <LCD_Write_Character>
 4b4:	8f e3       	ldi	r24, 0x3F	; 63
 4b6:	9c e9       	ldi	r25, 0x9C	; 156
 4b8:	01 97       	sbiw	r24, 0x01	; 1
 4ba:	f1 f7       	brne	.-4      	; 0x4b8 <LCD_Write_String+0x16>
 4bc:	00 c0       	rjmp	.+0      	; 0x4be <LCD_Write_String+0x1c>
 4be:	00 00       	nop
	/*Wait controller to finish command*/
	_delay_ms(5);
}
void LCD_Write_String(uint8_t* str)
{
	while(*str != '\0')
 4c0:	89 91       	ld	r24, Y+
 4c2:	81 11       	cpse	r24, r1
 4c4:	f5 cf       	rjmp	.-22     	; 0x4b0 <LCD_Write_String+0xe>
	{
		LCD_Write_Character(*str);
		_delay_ms(10);
		str++;
	}
}
 4c6:	df 91       	pop	r29
 4c8:	cf 91       	pop	r28
 4ca:	08 95       	ret

000004cc <ServoMotor_Initialization>:
 4cc:	8d 9a       	sbi	0x11, 5	; 17
 4ce:	8e b5       	in	r24, 0x2e	; 46
 4d0:	80 61       	ori	r24, 0x10	; 16
 4d2:	8e bd       	out	0x2e, r24	; 46
 4d4:	8e b5       	in	r24, 0x2e	; 46
 4d6:	88 60       	ori	r24, 0x08	; 8
 4d8:	8e bd       	out	0x2e, r24	; 46
 4da:	8f b5       	in	r24, 0x2f	; 47
 4dc:	82 60       	ori	r24, 0x02	; 2
 4de:	8f bd       	out	0x2f, r24	; 47
 4e0:	8f b5       	in	r24, 0x2f	; 47
 4e2:	8e 7f       	andi	r24, 0xFE	; 254
 4e4:	8f bd       	out	0x2f, r24	; 47
 4e6:	8f b5       	in	r24, 0x2f	; 47
 4e8:	80 68       	ori	r24, 0x80	; 128
 4ea:	8f bd       	out	0x2f, r24	; 47
 4ec:	8f b5       	in	r24, 0x2f	; 47
 4ee:	8f 7b       	andi	r24, 0xBF	; 191
 4f0:	8f bd       	out	0x2f, r24	; 47
 4f2:	8e b5       	in	r24, 0x2e	; 46
 4f4:	84 60       	ori	r24, 0x04	; 4
 4f6:	8e bd       	out	0x2e, r24	; 46
 4f8:	8e b5       	in	r24, 0x2e	; 46
 4fa:	8d 7f       	andi	r24, 0xFD	; 253
 4fc:	8e bd       	out	0x2e, r24	; 46
 4fe:	8e b5       	in	r24, 0x2e	; 46
 500:	8e 7f       	andi	r24, 0xFE	; 254
 502:	8e bd       	out	0x2e, r24	; 46
 504:	82 ee       	ldi	r24, 0xE2	; 226
 506:	94 e0       	ldi	r25, 0x04	; 4
 508:	97 bd       	out	0x27, r25	; 39
 50a:	86 bd       	out	0x26, r24	; 38
 50c:	08 95       	ret

0000050e <ServoMotor_Rotate>:
 50e:	46 b5       	in	r20, 0x26	; 38
 510:	57 b5       	in	r21, 0x27	; 39
 512:	9c 01       	movw	r18, r24
 514:	42 9f       	mul	r20, r18
 516:	c0 01       	movw	r24, r0
 518:	43 9f       	mul	r20, r19
 51a:	90 0d       	add	r25, r0
 51c:	52 9f       	mul	r21, r18
 51e:	90 0d       	add	r25, r0
 520:	11 24       	eor	r1, r1
 522:	9c 01       	movw	r18, r24
 524:	36 95       	lsr	r19
 526:	27 95       	ror	r18
 528:	36 95       	lsr	r19
 52a:	27 95       	ror	r18
 52c:	ab e7       	ldi	r26, 0x7B	; 123
 52e:	b4 e1       	ldi	r27, 0x14	; 20
 530:	0e 94 db 03 	call	0x7b6	; 0x7b6 <__umulhisi3>
 534:	96 95       	lsr	r25
 536:	87 95       	ror	r24
 538:	01 97       	sbiw	r24, 0x01	; 1
 53a:	9b bd       	out	0x2b, r25	; 43
 53c:	8a bd       	out	0x2a, r24	; 42
 53e:	08 95       	ret

00000540 <Ultrasonic>:
       
static volatile uint16_t distance_of_pulse  = 0; //variable to save the time of high pulse of echo until its falling
static volatile uint16_t echo_pin_value     = 0;// flag
uint16_t Ultrasonic(void)
{
	DIO_SetPinDirection(TRIG_PORT, TRIG_PIN,DIO_OUTPUT);
 540:	41 e0       	ldi	r20, 0x01	; 1
 542:	63 e0       	ldi	r22, 0x03	; 3
 544:	83 e0       	ldi	r24, 0x03	; 3
 546:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <DIO_SetPinDirection>
	GICR  |= 1<<INT0 ; //	Enable Peripheral interrupt
 54a:	8b b7       	in	r24, 0x3b	; 59
 54c:	80 64       	ori	r24, 0x40	; 64
 54e:	8b bf       	out	0x3b, r24	; 59
	MCUCR |= 1<<ISC00; 
 550:	85 b7       	in	r24, 0x35	; 53
 552:	81 60       	ori	r24, 0x01	; 1
 554:	85 bf       	out	0x35, r24	; 53
	uint16_t count_a=0; /*variable use to save the time has taken between triggering of ultrasonic and interruption of echo */
	sei();//Enable global interrupt
 556:	78 94       	sei
	while (1) 
     {
		DIO_SetPinValue(TRIG_PORT,TRIG_PIN,DIO_HIGH);//set trigger pin high
 558:	41 e0       	ldi	r20, 0x01	; 1
 55a:	63 e0       	ldi	r22, 0x03	; 3
 55c:	83 e0       	ldi	r24, 0x03	; 3
 55e:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <DIO_SetPinValue>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 562:	80 e5       	ldi	r24, 0x50	; 80
 564:	8a 95       	dec	r24
 566:	f1 f7       	brne	.-4      	; 0x564 <Ultrasonic+0x24>
		_delay_us(15);
		DIO_SetPinValue(TRIG_PORT,TRIG_PIN,DIO_LOW);//set trigger pin low
 568:	40 e0       	ldi	r20, 0x00	; 0
 56a:	63 e0       	ldi	r22, 0x03	; 3
 56c:	83 e0       	ldi	r24, 0x03	; 3
 56e:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <DIO_SetPinValue>
		count_a=distance_of_pulse/58;	//distance in centimeters
 572:	20 91 7c 00 	lds	r18, 0x007C	; 0x80007c <distance_of_pulse>
 576:	30 91 7d 00 	lds	r19, 0x007D	; 0x80007d <distance_of_pulse+0x1>
		return count_a;//return distance in centimeters
 57a:	af e9       	ldi	r26, 0x9F	; 159
 57c:	b6 e4       	ldi	r27, 0x46	; 70
 57e:	0e 94 db 03 	call	0x7b6	; 0x7b6 <__umulhisi3>
     }
   	   
}
 582:	92 95       	swap	r25
 584:	82 95       	swap	r24
 586:	8f 70       	andi	r24, 0x0F	; 15
 588:	89 27       	eor	r24, r25
 58a:	9f 70       	andi	r25, 0x0F	; 15
 58c:	89 27       	eor	r24, r25
 58e:	08 95       	ret

00000590 <__vector_1>:
ISR(INT0_vect)
{
 590:	1f 92       	push	r1
 592:	0f 92       	push	r0
 594:	0f b6       	in	r0, 0x3f	; 63
 596:	0f 92       	push	r0
 598:	11 24       	eor	r1, r1
 59a:	8f 93       	push	r24
 59c:	9f 93       	push	r25
	if (echo_pin_value==1)
 59e:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <echo_pin_value>
 5a2:	90 91 7b 00 	lds	r25, 0x007B	; 0x80007b <echo_pin_value+0x1>
 5a6:	01 97       	sbiw	r24, 0x01	; 1
 5a8:	71 f4       	brne	.+28     	; 0x5c6 <__vector_1+0x36>
	{
		TCCR1B =0;// stop the timer
 5aa:	1e bc       	out	0x2e, r1	; 46
		distance_of_pulse=TCNT1;
 5ac:	8c b5       	in	r24, 0x2c	; 44
 5ae:	9d b5       	in	r25, 0x2d	; 45
 5b0:	90 93 7d 00 	sts	0x007D, r25	; 0x80007d <distance_of_pulse+0x1>
 5b4:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <distance_of_pulse>
		TCNT1=0;
 5b8:	1d bc       	out	0x2d, r1	; 45
 5ba:	1c bc       	out	0x2c, r1	; 44
		echo_pin_value=0;
 5bc:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <echo_pin_value+0x1>
 5c0:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <echo_pin_value>
 5c4:	0f c0       	rjmp	.+30     	; 0x5e4 <__vector_1+0x54>
	}
	else if (echo_pin_value==0)
 5c6:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <echo_pin_value>
 5ca:	90 91 7b 00 	lds	r25, 0x007B	; 0x80007b <echo_pin_value+0x1>
 5ce:	89 2b       	or	r24, r25
 5d0:	49 f4       	brne	.+18     	; 0x5e4 <__vector_1+0x54>
	{
		TCCR1B |= 1<<CS10; //START TIMER 1
 5d2:	8e b5       	in	r24, 0x2e	; 46
 5d4:	81 60       	ori	r24, 0x01	; 1
 5d6:	8e bd       	out	0x2e, r24	; 46
		echo_pin_value=1;
 5d8:	81 e0       	ldi	r24, 0x01	; 1
 5da:	90 e0       	ldi	r25, 0x00	; 0
 5dc:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <echo_pin_value+0x1>
 5e0:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <echo_pin_value>
	}
}
 5e4:	9f 91       	pop	r25
 5e6:	8f 91       	pop	r24
 5e8:	0f 90       	pop	r0
 5ea:	0f be       	out	0x3f, r0	; 63
 5ec:	0f 90       	pop	r0
 5ee:	1f 90       	pop	r1
 5f0:	18 95       	reti

000005f2 <DIO_SetPinDirection>:
//Include library
#include "DIO.h"
//Prototypes for functions for pin only
void DIO_SetPinDirection (Port port, Pin pin, State state)
{
	switch (state)
 5f2:	44 23       	and	r20, r20
 5f4:	19 f0       	breq	.+6      	; 0x5fc <DIO_SetPinDirection+0xa>
 5f6:	41 30       	cpi	r20, 0x01	; 1
 5f8:	c9 f1       	breq	.+114    	; 0x66c <DIO_SetPinDirection+0x7a>
 5fa:	08 95       	ret
	{
		case DIO_INPUT:
		switch (port)
 5fc:	81 30       	cpi	r24, 0x01	; 1
 5fe:	91 f0       	breq	.+36     	; 0x624 <DIO_SetPinDirection+0x32>
 600:	28 f0       	brcs	.+10     	; 0x60c <DIO_SetPinDirection+0x1a>
 602:	82 30       	cpi	r24, 0x02	; 2
 604:	d9 f0       	breq	.+54     	; 0x63c <DIO_SetPinDirection+0x4a>
 606:	83 30       	cpi	r24, 0x03	; 3
 608:	29 f1       	breq	.+74     	; 0x654 <DIO_SetPinDirection+0x62>
 60a:	08 95       	ret
		{
			case DIO_PORTA:
			CLR_BIT(DDRA, pin);
 60c:	2a b3       	in	r18, 0x1a	; 26
 60e:	81 e0       	ldi	r24, 0x01	; 1
 610:	90 e0       	ldi	r25, 0x00	; 0
 612:	02 c0       	rjmp	.+4      	; 0x618 <DIO_SetPinDirection+0x26>
 614:	88 0f       	add	r24, r24
 616:	99 1f       	adc	r25, r25
 618:	6a 95       	dec	r22
 61a:	e2 f7       	brpl	.-8      	; 0x614 <DIO_SetPinDirection+0x22>
 61c:	80 95       	com	r24
 61e:	82 23       	and	r24, r18
 620:	8a bb       	out	0x1a, r24	; 26
			break;
 622:	08 95       	ret
			case DIO_PORTB:
			CLR_BIT(DDRB, pin);
 624:	27 b3       	in	r18, 0x17	; 23
 626:	81 e0       	ldi	r24, 0x01	; 1
 628:	90 e0       	ldi	r25, 0x00	; 0
 62a:	02 c0       	rjmp	.+4      	; 0x630 <DIO_SetPinDirection+0x3e>
 62c:	88 0f       	add	r24, r24
 62e:	99 1f       	adc	r25, r25
 630:	6a 95       	dec	r22
 632:	e2 f7       	brpl	.-8      	; 0x62c <DIO_SetPinDirection+0x3a>
 634:	80 95       	com	r24
 636:	82 23       	and	r24, r18
 638:	87 bb       	out	0x17, r24	; 23
			break;
 63a:	08 95       	ret
			case DIO_PORTC:
			CLR_BIT(DDRC, pin);
 63c:	24 b3       	in	r18, 0x14	; 20
 63e:	81 e0       	ldi	r24, 0x01	; 1
 640:	90 e0       	ldi	r25, 0x00	; 0
 642:	02 c0       	rjmp	.+4      	; 0x648 <DIO_SetPinDirection+0x56>
 644:	88 0f       	add	r24, r24
 646:	99 1f       	adc	r25, r25
 648:	6a 95       	dec	r22
 64a:	e2 f7       	brpl	.-8      	; 0x644 <DIO_SetPinDirection+0x52>
 64c:	80 95       	com	r24
 64e:	82 23       	and	r24, r18
 650:	84 bb       	out	0x14, r24	; 20
			break;
 652:	08 95       	ret
			case DIO_PORTD:
			CLR_BIT(DDRD, pin);
 654:	21 b3       	in	r18, 0x11	; 17
 656:	81 e0       	ldi	r24, 0x01	; 1
 658:	90 e0       	ldi	r25, 0x00	; 0
 65a:	02 c0       	rjmp	.+4      	; 0x660 <DIO_SetPinDirection+0x6e>
 65c:	88 0f       	add	r24, r24
 65e:	99 1f       	adc	r25, r25
 660:	6a 95       	dec	r22
 662:	e2 f7       	brpl	.-8      	; 0x65c <DIO_SetPinDirection+0x6a>
 664:	80 95       	com	r24
 666:	82 23       	and	r24, r18
 668:	81 bb       	out	0x11, r24	; 17
			break;
 66a:	08 95       	ret
		}
		break;
		case DIO_OUTPUT:
		switch (port)
 66c:	81 30       	cpi	r24, 0x01	; 1
 66e:	89 f0       	breq	.+34     	; 0x692 <DIO_SetPinDirection+0xa0>
 670:	28 f0       	brcs	.+10     	; 0x67c <DIO_SetPinDirection+0x8a>
 672:	82 30       	cpi	r24, 0x02	; 2
 674:	c9 f0       	breq	.+50     	; 0x6a8 <DIO_SetPinDirection+0xb6>
 676:	83 30       	cpi	r24, 0x03	; 3
 678:	11 f1       	breq	.+68     	; 0x6be <DIO_SetPinDirection+0xcc>
 67a:	08 95       	ret
		{
			case DIO_PORTA:
			SET_BIT(DDRA, pin);
 67c:	2a b3       	in	r18, 0x1a	; 26
 67e:	81 e0       	ldi	r24, 0x01	; 1
 680:	90 e0       	ldi	r25, 0x00	; 0
 682:	02 c0       	rjmp	.+4      	; 0x688 <DIO_SetPinDirection+0x96>
 684:	88 0f       	add	r24, r24
 686:	99 1f       	adc	r25, r25
 688:	6a 95       	dec	r22
 68a:	e2 f7       	brpl	.-8      	; 0x684 <DIO_SetPinDirection+0x92>
 68c:	82 2b       	or	r24, r18
 68e:	8a bb       	out	0x1a, r24	; 26
			break;
 690:	08 95       	ret
			case DIO_PORTB:
			SET_BIT(DDRB, pin);
 692:	27 b3       	in	r18, 0x17	; 23
 694:	81 e0       	ldi	r24, 0x01	; 1
 696:	90 e0       	ldi	r25, 0x00	; 0
 698:	02 c0       	rjmp	.+4      	; 0x69e <DIO_SetPinDirection+0xac>
 69a:	88 0f       	add	r24, r24
 69c:	99 1f       	adc	r25, r25
 69e:	6a 95       	dec	r22
 6a0:	e2 f7       	brpl	.-8      	; 0x69a <DIO_SetPinDirection+0xa8>
 6a2:	82 2b       	or	r24, r18
 6a4:	87 bb       	out	0x17, r24	; 23
			break;
 6a6:	08 95       	ret
			case DIO_PORTC:
			SET_BIT(DDRC, pin);
 6a8:	24 b3       	in	r18, 0x14	; 20
 6aa:	81 e0       	ldi	r24, 0x01	; 1
 6ac:	90 e0       	ldi	r25, 0x00	; 0
 6ae:	02 c0       	rjmp	.+4      	; 0x6b4 <DIO_SetPinDirection+0xc2>
 6b0:	88 0f       	add	r24, r24
 6b2:	99 1f       	adc	r25, r25
 6b4:	6a 95       	dec	r22
 6b6:	e2 f7       	brpl	.-8      	; 0x6b0 <DIO_SetPinDirection+0xbe>
 6b8:	82 2b       	or	r24, r18
 6ba:	84 bb       	out	0x14, r24	; 20
			break;
 6bc:	08 95       	ret
			case DIO_PORTD:
			SET_BIT(DDRD, pin);
 6be:	21 b3       	in	r18, 0x11	; 17
 6c0:	81 e0       	ldi	r24, 0x01	; 1
 6c2:	90 e0       	ldi	r25, 0x00	; 0
 6c4:	02 c0       	rjmp	.+4      	; 0x6ca <DIO_SetPinDirection+0xd8>
 6c6:	88 0f       	add	r24, r24
 6c8:	99 1f       	adc	r25, r25
 6ca:	6a 95       	dec	r22
 6cc:	e2 f7       	brpl	.-8      	; 0x6c6 <DIO_SetPinDirection+0xd4>
 6ce:	82 2b       	or	r24, r18
 6d0:	81 bb       	out	0x11, r24	; 17
 6d2:	08 95       	ret

000006d4 <DIO_SetPinValue>:
	}
}
//If pin is defined as output
void DIO_SetPinValue (Port port, Pin pin, Status status)
{
	switch (status)
 6d4:	44 23       	and	r20, r20
 6d6:	19 f0       	breq	.+6      	; 0x6de <DIO_SetPinValue+0xa>
 6d8:	41 30       	cpi	r20, 0x01	; 1
 6da:	c9 f1       	breq	.+114    	; 0x74e <DIO_SetPinValue+0x7a>
 6dc:	08 95       	ret
	{
		case DIO_LOW:
		switch (port)
 6de:	81 30       	cpi	r24, 0x01	; 1
 6e0:	91 f0       	breq	.+36     	; 0x706 <DIO_SetPinValue+0x32>
 6e2:	28 f0       	brcs	.+10     	; 0x6ee <DIO_SetPinValue+0x1a>
 6e4:	82 30       	cpi	r24, 0x02	; 2
 6e6:	d9 f0       	breq	.+54     	; 0x71e <DIO_SetPinValue+0x4a>
 6e8:	83 30       	cpi	r24, 0x03	; 3
 6ea:	29 f1       	breq	.+74     	; 0x736 <DIO_SetPinValue+0x62>
 6ec:	08 95       	ret
		{
			case DIO_PORTA:
			CLR_BIT(PORTA, pin);
 6ee:	2b b3       	in	r18, 0x1b	; 27
 6f0:	81 e0       	ldi	r24, 0x01	; 1
 6f2:	90 e0       	ldi	r25, 0x00	; 0
 6f4:	02 c0       	rjmp	.+4      	; 0x6fa <DIO_SetPinValue+0x26>
 6f6:	88 0f       	add	r24, r24
 6f8:	99 1f       	adc	r25, r25
 6fa:	6a 95       	dec	r22
 6fc:	e2 f7       	brpl	.-8      	; 0x6f6 <DIO_SetPinValue+0x22>
 6fe:	80 95       	com	r24
 700:	82 23       	and	r24, r18
 702:	8b bb       	out	0x1b, r24	; 27
			break;
 704:	08 95       	ret
			case DIO_PORTB:
			CLR_BIT(PORTB, pin);
 706:	28 b3       	in	r18, 0x18	; 24
 708:	81 e0       	ldi	r24, 0x01	; 1
 70a:	90 e0       	ldi	r25, 0x00	; 0
 70c:	02 c0       	rjmp	.+4      	; 0x712 <DIO_SetPinValue+0x3e>
 70e:	88 0f       	add	r24, r24
 710:	99 1f       	adc	r25, r25
 712:	6a 95       	dec	r22
 714:	e2 f7       	brpl	.-8      	; 0x70e <DIO_SetPinValue+0x3a>
 716:	80 95       	com	r24
 718:	82 23       	and	r24, r18
 71a:	88 bb       	out	0x18, r24	; 24
			break;
 71c:	08 95       	ret
			case DIO_PORTC:
			CLR_BIT(PORTC, pin);
 71e:	25 b3       	in	r18, 0x15	; 21
 720:	81 e0       	ldi	r24, 0x01	; 1
 722:	90 e0       	ldi	r25, 0x00	; 0
 724:	02 c0       	rjmp	.+4      	; 0x72a <DIO_SetPinValue+0x56>
 726:	88 0f       	add	r24, r24
 728:	99 1f       	adc	r25, r25
 72a:	6a 95       	dec	r22
 72c:	e2 f7       	brpl	.-8      	; 0x726 <DIO_SetPinValue+0x52>
 72e:	80 95       	com	r24
 730:	82 23       	and	r24, r18
 732:	85 bb       	out	0x15, r24	; 21
			break;
 734:	08 95       	ret
			case DIO_PORTD:
			CLR_BIT(PORTD, pin);
 736:	22 b3       	in	r18, 0x12	; 18
 738:	81 e0       	ldi	r24, 0x01	; 1
 73a:	90 e0       	ldi	r25, 0x00	; 0
 73c:	02 c0       	rjmp	.+4      	; 0x742 <DIO_SetPinValue+0x6e>
 73e:	88 0f       	add	r24, r24
 740:	99 1f       	adc	r25, r25
 742:	6a 95       	dec	r22
 744:	e2 f7       	brpl	.-8      	; 0x73e <DIO_SetPinValue+0x6a>
 746:	80 95       	com	r24
 748:	82 23       	and	r24, r18
 74a:	82 bb       	out	0x12, r24	; 18
			break;
 74c:	08 95       	ret
		}
		break;
		case DIO_HIGH:
		switch (port)
 74e:	81 30       	cpi	r24, 0x01	; 1
 750:	89 f0       	breq	.+34     	; 0x774 <DIO_SetPinValue+0xa0>
 752:	28 f0       	brcs	.+10     	; 0x75e <DIO_SetPinValue+0x8a>
 754:	82 30       	cpi	r24, 0x02	; 2
 756:	c9 f0       	breq	.+50     	; 0x78a <DIO_SetPinValue+0xb6>
 758:	83 30       	cpi	r24, 0x03	; 3
 75a:	11 f1       	breq	.+68     	; 0x7a0 <DIO_SetPinValue+0xcc>
 75c:	08 95       	ret
		{
			case DIO_PORTA:
			SET_BIT(PORTA, pin);
 75e:	2b b3       	in	r18, 0x1b	; 27
 760:	81 e0       	ldi	r24, 0x01	; 1
 762:	90 e0       	ldi	r25, 0x00	; 0
 764:	02 c0       	rjmp	.+4      	; 0x76a <DIO_SetPinValue+0x96>
 766:	88 0f       	add	r24, r24
 768:	99 1f       	adc	r25, r25
 76a:	6a 95       	dec	r22
 76c:	e2 f7       	brpl	.-8      	; 0x766 <DIO_SetPinValue+0x92>
 76e:	82 2b       	or	r24, r18
 770:	8b bb       	out	0x1b, r24	; 27
			break;
 772:	08 95       	ret
			case DIO_PORTB:
			SET_BIT(PORTB, pin);
 774:	28 b3       	in	r18, 0x18	; 24
 776:	81 e0       	ldi	r24, 0x01	; 1
 778:	90 e0       	ldi	r25, 0x00	; 0
 77a:	02 c0       	rjmp	.+4      	; 0x780 <DIO_SetPinValue+0xac>
 77c:	88 0f       	add	r24, r24
 77e:	99 1f       	adc	r25, r25
 780:	6a 95       	dec	r22
 782:	e2 f7       	brpl	.-8      	; 0x77c <DIO_SetPinValue+0xa8>
 784:	82 2b       	or	r24, r18
 786:	88 bb       	out	0x18, r24	; 24
			break;
 788:	08 95       	ret
			case DIO_PORTC:
			SET_BIT(PORTC, pin);
 78a:	25 b3       	in	r18, 0x15	; 21
 78c:	81 e0       	ldi	r24, 0x01	; 1
 78e:	90 e0       	ldi	r25, 0x00	; 0
 790:	02 c0       	rjmp	.+4      	; 0x796 <DIO_SetPinValue+0xc2>
 792:	88 0f       	add	r24, r24
 794:	99 1f       	adc	r25, r25
 796:	6a 95       	dec	r22
 798:	e2 f7       	brpl	.-8      	; 0x792 <DIO_SetPinValue+0xbe>
 79a:	82 2b       	or	r24, r18
 79c:	85 bb       	out	0x15, r24	; 21
			break;
 79e:	08 95       	ret
			case DIO_PORTD:
			SET_BIT(PORTD, pin);
 7a0:	22 b3       	in	r18, 0x12	; 18
 7a2:	81 e0       	ldi	r24, 0x01	; 1
 7a4:	90 e0       	ldi	r25, 0x00	; 0
 7a6:	02 c0       	rjmp	.+4      	; 0x7ac <DIO_SetPinValue+0xd8>
 7a8:	88 0f       	add	r24, r24
 7aa:	99 1f       	adc	r25, r25
 7ac:	6a 95       	dec	r22
 7ae:	e2 f7       	brpl	.-8      	; 0x7a8 <DIO_SetPinValue+0xd4>
 7b0:	82 2b       	or	r24, r18
 7b2:	82 bb       	out	0x12, r24	; 18
 7b4:	08 95       	ret

000007b6 <__umulhisi3>:
 7b6:	a2 9f       	mul	r26, r18
 7b8:	b0 01       	movw	r22, r0
 7ba:	b3 9f       	mul	r27, r19
 7bc:	c0 01       	movw	r24, r0
 7be:	a3 9f       	mul	r26, r19
 7c0:	70 0d       	add	r23, r0
 7c2:	81 1d       	adc	r24, r1
 7c4:	11 24       	eor	r1, r1
 7c6:	91 1d       	adc	r25, r1
 7c8:	b2 9f       	mul	r27, r18
 7ca:	70 0d       	add	r23, r0
 7cc:	81 1d       	adc	r24, r1
 7ce:	11 24       	eor	r1, r1
 7d0:	91 1d       	adc	r25, r1
 7d2:	08 95       	ret

000007d4 <_exit>:
 7d4:	f8 94       	cli

000007d6 <__stop_program>:
 7d6:	ff cf       	rjmp	.-2      	; 0x7d6 <__stop_program>
